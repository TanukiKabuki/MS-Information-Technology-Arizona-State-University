# Name: Harsh Siddhapura
# Enrollment No.: 1230169813
# Date: 10/30/2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


















## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")




## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")

## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")


## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

/*# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.‚Äù)*/## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")



## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair
key = RSA.generate(2048)

# Sender (Alice) signs the message
message = b"Hello Bob, this message is signed by Alice."
hash_message = SHA256.new(message)
signature = pkcs1_15.new(key).sign(hash_message)

# Receiver (Bob) verifies the signature
verifier = pkcs1_15.new(key.publickey())

try:
    verifier.verify(hash_message, signature)
    print("Digital Signature Verified: Message is Authentic.")
except (ValueError, TypeError):
    print("Digital Signature Verification Failed: Message may have been tampered.")
## Student Name: Venkata Vineetha Gandredu
## Student ID: 1230643650
## Date: 1st November 2023

import hashlib 
def generate_hash(message):
    hash_object = hashlib.sha256(message.encode())
    return hash_object.hexdigest()

# User Input
user_input = input("Enter a message to hash: ")
hash_value = generate_hash(user_input)
print("Hash Value:", hash_value)

from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

# Generate RSA key pair










































